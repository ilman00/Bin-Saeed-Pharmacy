<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Medical Store Dashboard</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">

  <style>
    .spinner-border {
      width: 1rem;
      height: 1rem;
      border-width: 0.15em;
    }

    .autocomplete-suggestions {
      position: absolute;
      background-color: white;
      border: 1px solid #ccc;
      z-index: 1000;
      width: 100%;
      max-height: 150px;
      overflow-y: auto;
    }

    .autocomplete-suggestions div {
      padding: 4px 8px;
      cursor: pointer;
    }

    .autocomplete-suggestions div:hover {
      background-color: #f0f0f0;
    }

    .hover-effect:hover {
      color: #0d6efd !important;
      background-color: rgba(13, 110, 253, 0.1);
      border-radius: 5px;
      transition: all 0.2s ease-in-out;
    }
  </style>
</head>

<body class="p-4">
  <div class="container">
    <h2 class="mb-4">Medical Order Dashboard</h2>
    <!-- Navbar -->
    <!-- Responsive Navbar -->
    <nav class="navbar navbar-expand-lg bg-light shadow-sm mb-4" style="height: 40px;">
      <div class="container-fluid">
        <a class="navbar-brand fw-semibold" href="#">Dashboard</a>
        <button class="navbar-toggler p-0 border-0" type="button" data-bs-toggle="collapse"
          data-bs-target="#navbarItems" aria-controls="navbarItems" aria-expanded="false"
          aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarItems">
          <ul class="navbar-nav ms-auto gap-lg-4 gap-2 align-items-center">
            <li class="nav-item">
              <a class="nav-link d-flex align-items-center text-dark fw-semibold hover-effect" href="#">
                <i class="bi bi-plus-circle me-1"></i> Add
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link d-flex align-items-center text-dark fw-semibold hover-effect" href="#">
                <i class="bi bi-calendar-event me-1"></i> Today Sale
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link d-flex align-items-center text-dark fw-semibold hover-effect" href="#">
                <i class="bi bi-graph-up-arrow me-1"></i> Profit
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link d-flex align-items-center text-dark fw-semibold hover-effect" href="#">
                <i class="bi bi-graph-down-arrow me-1"></i> Loss
              </a>
            </li>
          </ul>
        </div>
      </div>
    </nav>


    <table class="table table-bordered">
      <thead>
        <tr>
          <th>Brand</th>
          <th>Formula</th>
          <th>Price (Rs)</th>
          <th>Editable Price (Rs)</th>
          <th>Discount</th>
          <th>Stock</th>
          <th>Quantity</th>
          <th>Total</th>
        </tr>
      </thead>
      <tbody id="tableBody"></tbody>
      <tfoot>
        <tr>
          <td colspan="7" class="text-end fw-bold">Grand Total:</td>
          <td id="grandTotal" class="fw-bold">0.00</td>
        </tr>
      </tfoot>
    </table>
    <div class="d-flex gap-2">
      <button id="submitOrderBtn" class="btn btn-primary d-flex align-items-center gap-2">
        <span>Submit Order</span>
        <div id="submitSpinner" class="spinner-border d-none" role="status"></div>
      </button>
      <button id="resetBtn" class="btn btn-secondary">Reset</button>
    </div>
  </div>

  <script>
    const tableBody = document.getElementById("tableBody");

    function createRow() {
      const row = document.createElement("tr");
      row.innerHTML = `
        <td><div class="position-relative"><input class="form-control" data-type="brand" autocomplete="off" /></div></td>
        <td></td>
        <td></td>
        <td><input class="form-control" data-type="price" type="number" /></td>
        <td><input class="form-control" data-type="discount" placeholder="10% or 15" /></td>
        <td></td>
        <td><input class="form-control" data-type="quantity" type="number" value="1" /></td>
        <td>0.00</td>
      `;
      tableBody.appendChild(row);

      const inputs = row.querySelectorAll("input");
      inputs.forEach((input) => {
        if (input.dataset.type === "brand") {
          input.addEventListener("input", () => showSuggestions(input, row));
        }

        input.addEventListener("keydown", (e) => {
          if (e.key === "Enter") {
            if (input.dataset.type === "brand" && input.selectedMedicine) {
              fillMedicineDetails(row, input.selectedMedicine);
            }
            moveToNextInput(input, row);
          }
        });

        input.addEventListener("input", () => calculateRowTotal(row));
      });

      row.querySelector('[data-type="brand"]').focus();
    }

    function showSuggestions(input, row) {
      const value = input.value.trim();
      if (!value) return;

      fetch(`http://localhost:5000/api/sale?query=${encodeURIComponent(value)}`)
        .then(res => res.json())
        .then(matches => {
          let suggestionBox = input.nextElementSibling;
          if (!suggestionBox || !suggestionBox.classList.contains("autocomplete-suggestions")) {
            suggestionBox = document.createElement("div");
            suggestionBox.className = "autocomplete-suggestions";
            input.parentNode.appendChild(suggestionBox);
          }

          suggestionBox.innerHTML = matches.map(med => `<div>${med.brand}</div>`).join("");
          suggestionBox.style.display = matches.length ? "block" : "none";

          suggestionBox.querySelectorAll("div").forEach((div, index) => {
            div.addEventListener("click", () => {
              const selectedMed = matches[index];
              input.value = selectedMed.brand;
              input.selectedMedicine = selectedMed; // ✅ Store selected medicine
              fillMedicineDetails(row, selectedMed);
              suggestionBox.style.display = "none";
            });

          });

          // Add Enter key support
          input.onkeydown = function (e) {
            if (e.key === "Enter") {
              e.preventDefault();
              if (matches.length > 0) {
                const selectedMed = matches[0];
                input.value = selectedMed.brand;
                input.selectedMedicine = selectedMed; // ✅ Store selected medicine
                fillMedicineDetails(row, selectedMed);
                suggestionBox.style.display = "none";
                moveToNextInput(input, row);
              }
            }
          };

        })
        .catch(error => {
          console.error("Error fetching medicine data:", error);
        });
    }

    function fillMedicineDetails(row, medicine) {
      if (medicine) {
        row.children[1].textContent = medicine.formula;
        row.children[2].textContent = medicine.price.toFixed(2);
        row.querySelector('[data-type="price"]').value = medicine.price;
        row.children[5].textContent = medicine.stock;
        calculateRowTotal(row);
      }
    }


    function moveToNextInput(currentInput, row) {
      const inputs = row.querySelectorAll("input");
      const index = Array.from(inputs).indexOf(currentInput);
      if (index < inputs.length - 1) {
        inputs[index + 1].focus();
      } else {
        createRow();
      }
    }

    function calculateRowTotal(row) {
      const price = parseFloat(row.querySelector('[data-type="price"]').value) || 0;
      const discountInput = row.querySelector('[data-type="discount"]').value.trim().toLowerCase();
      const quantity = parseInt(row.querySelector('[data-type="quantity"]').value) || 1;

      let discount = 0;
      if (discountInput.endsWith("%")) {
        const percent = parseFloat(discountInput);
        if (!isNaN(percent)) discount = price * (percent / 100);
      } else {
        const flat = parseFloat(discountInput);
        if (!isNaN(flat)) discount = flat;
      }

      const finalPrice = Math.max(price - discount, 0);
      const total = finalPrice * quantity;
      row.children[7].textContent = total.toFixed(2);
      updateGrandTotal();
    }

    function updateGrandTotal() {
      let total = 0;
      tableBody.querySelectorAll("tr").forEach(row => {
        total += parseFloat(row.children[7].textContent) || 0;
      });
      document.getElementById("grandTotal").textContent = total.toFixed(2);
    }

    function submitOrder() {
      const data = [];
      let hasInvalid = false;

      const btn = document.getElementById("submitOrderBtn");
      const spinner = document.getElementById("submitSpinner");
      btn.disabled = true;
      spinner.classList.remove("d-none");

      tableBody.querySelectorAll("tr").forEach(row => {
        console.log(row);
        const brandInput = row.querySelector('[data-type="brand"]');
        const medicine = brandInput.selectedMedicine;
        console.log(medicine);
        if (!brandInput.value.trim() || !medicine) return;

        const quantity = parseInt(row.querySelector('[data-type="quantity"]').value);
        const stock = parseInt(row.children[5].textContent);

        if (quantity > stock) {
          alert(`Not enough stock for ${medicine.brand}. Requested: ${quantity}, Available: ${stock}`);
          hasInvalid = true;
          return;
        }

        data.push({
          brand: medicine.brand,
          formula: medicine.formula,
          price: parseFloat(row.children[2].textContent),
          discount: row.querySelector('[data-type="discount"]').value.trim(),
          quantity,
          stock,
          total: parseFloat(row.children[7].textContent)
        });
      });

      if (hasInvalid) {
        btn.disabled = false;
        spinner.classList.add("d-none");
        return;
      }

      sendToBackend(data, () => {
        btn.disabled = false;
        spinner.classList.add("d-none");
        resetTable();
      });
    }

    function sendToBackend(data, callback) {
      console.log(data);
      fetch("http://localhost:5000/api/sale/update", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ items: data })
      })
        .then(res => res.json())
        .then(result => {
          console.log("Saved:", result);
          window.location.href = `/reciept?saleId=${result.saleId}`;
        })
        .catch(err => {
          alert("Failed to submit order.");
          console.error("Submit Error:", err);
        })
        .finally(callback);
    }

    function resetTable() {
      tableBody.innerHTML = "";
      document.getElementById("grandTotal").textContent = "0.00";
      createRow();
    }

    document.getElementById("submitOrderBtn").addEventListener("click", submitOrder);
    document.getElementById("resetBtn").addEventListener("click", resetTable);

    createRow();
  </script>
</body>

</html>